S
IDENTIFIER INTEGER instanceof . CHARACTER STRING BOOLEAN NULL = | & || && == != < > <= >= + - * / % ( ) this new class void [ ] ! byte short char int boolean { } if else for ; while return public protected abstract static final native package import implements extends , BOF EOF interface
S -> BOF CompilationUnit EOF
Literal -> INTEGER
Literal -> BOOLEAN
Literal -> CHARACTER
Literal -> STRING
Literal -> NULL
Type -> PrimitiveType
Type -> ReferenceType
PrimitiveType -> byte
PrimitiveType -> short
PrimitiveType -> int
PrimitiveType -> char
PrimitiveType -> boolean
ReferenceType -> ClassOrInterfaceType
ReferenceType -> ArrayType
ClassOrInterfaceType -> Name
ClassType -> ClassOrInterfaceType
InterfaceType -> ClassOrInterfaceType
ArrayType ->  PrimitiveType [ ]
ArrayType -> Name [ ]
Name -> SimpleName
Name -> QualifiedName
SimpleName -> IDENTIFIER
QualifiedName -> Name . IDENTIFIER
CompilationUnit -> PackageDeclarationOpt ImportDeclarationsOpt TypeDeclarationOpt
PackageDeclarationOpt -> PackageDeclaration
PackageDeclarationOpt ->
ImportDeclarationsOpt -> ImportDeclarations
ImportDeclarationsOpt ->
ImportDeclarations -> ImportDeclaration
ImportDeclarations -> ImportDeclarations ImportDeclaration
TypeDeclarationOpt -> TypeDeclaration
TypeDeclarationOpt ->
PackageDeclaration -> package Name ;
ImportDeclaration -> SingleTypeImportDeclaration
ImportDeclaration -> TypeImportOnDemandDeclaration
SingleTypeImportDeclaration -> import Name ;
TypeImportOnDemandDeclaration -> import Name . * ;
TypeDeclaration -> ClassDeclaration
TypeDeclaration -> InterfaceDeclaration
TypeDeclaration -> ;
Modifiers -> Modifier
Modifiers -> Modifiers Modifier
Modifier -> public
Modifier -> protected
Modifier -> static
Modifier -> abstract
Modifier -> final
Modifier -> native
ClassDeclaration -> Modifiers class IDENTIFIER SuperOpt InterfacesOpt ClassBody
SuperOpt -> Super
SuperOpt ->
InterfacesOpt -> Interfaces
InterfacesOpt ->
Super -> extends ClassType
Interfaces -> implements InterfaceTypeList
InterfaceTypeList -> InterfaceType
InterfaceTypeList -> InterfaceTypeList , InterfaceType
ClassBody -> { ClassBodyDeclarationsOpt }
ClassBodyDeclarationsOpt -> ClassBodyDeclarations
ClassBodyDeclarationsOpt ->
ClassBodyDeclarations -> ClassBodyDeclaration
ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration
ClassBodyDeclaration -> ClassMemberDeclaration
ClassBodyDeclaration -> ConstructorDeclaration
ClassMemberDeclaration -> FieldDeclaration
ClassMemberDeclaration -> MethodDeclaration
FieldDeclaration -> Modifiers Type VariableDeclarator ;
FieldDeclaration -> Modifiers Type IDENTIFIER ;
VariableDeclarator -> IDENTIFIER = VariableInitializer
VariableInitializer -> Expression
MethodDeclaration -> MethodHeader MethodBody
MethodHeader -> Modifiers Type MethodDeclarator
MethodHeader -> Modifiers void MethodDeclarator
MethodDeclarator -> IDENTIFIER ( FormalParameterListOpt )
FormalParameterListOpt -> FormalParameterList
FormalParameterListOpt ->
FormalParameterList -> FormalParameter
FormalParameterList -> FormalParameterList , FormalParameter
FormalParameter -> Type IDENTIFIER
ClassTypeList -> ClassType
ClassTypeList -> ClassTypeList , ClassType
MethodBody -> Block
MethodBody -> ;
ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody
ConstructorDeclarator -> SimpleName ( FormalParameterListOpt )
ConstructorBody -> { BlockStatementsOpt }
BlockStatementsOpt -> BlockStatements
BlockStatementsOpt ->
InterfaceDeclaration -> Modifiers interface IDENTIFIER ExtendsInterfacesOpt InterfaceBody
ExtendsInterfacesOpt -> ExtendsInterfaces
ExtendsInterfacesOpt ->
ExtendsInterfaces -> extends InterfaceType
ExtendsInterfaces -> ExtendsInterfaces , InterfaceType
InterfaceBody -> { InterfaceMemberDeclarationsOpt }
InterfaceMemberDeclarationsOpt -> InterfaceMemberDeclarations
InterfaceMemberDeclarationsOpt ->
InterfaceMemberDeclarations -> InterfaceMemberDeclaration
InterfaceMemberDeclarations -> InterfaceMemberDeclarations InterfaceMemberDeclaration
InterfaceMemberDeclaration -> AbstractMethodDeclaration
AbstractMethodDeclaration -> MethodHeader ;
Block -> { BlockStatementsOpt }
BlockStatements -> BlockStatement
BlockStatements -> BlockStatements BlockStatement
BlockStatement -> LocalVariableDeclarationStatement
BlockStatement -> Statement
LocalVariableDeclarationStatement -> LocalVariableDeclaration ;
LocalVariableDeclaration -> Type VariableDeclarator
Statement -> StatementWithoutTrailingSubstatement
Statement -> IfThenStatement
Statement -> IfThenElseStatement
Statement -> WhileStatement
Statement -> ForStatement
StatementNoShortIf -> StatementWithoutTrailingSubstatement
StatementNoShortIf -> IfThenElseStatementNoShortIf
StatementNoShortIf -> WhileStatementNoShortIf
StatementNoShortIf -> ForStatementNoShortIf
StatementWithoutTrailingSubstatement -> Block
StatementWithoutTrailingSubstatement -> EmptyStatement
StatementWithoutTrailingSubstatement -> ExpressionStatement
StatementWithoutTrailingSubstatement -> ReturnStatement
EmptyStatement -> ;
ExpressionStatement -> StatementExpression ;
StatementExpression -> Assignment
StatementExpression -> MethodInvocation
StatementExpression -> ClassInstanceCreationExpression
IfThenStatement -> if ( Expression ) Statement
IfThenElseStatement -> if ( Expression ) StatementNoShortIf else Statement
IfThenElseStatementNoShortIf -> if ( Expression ) StatementNoShortIf else StatementNoShortIf
WhileStatement -> while ( Expression ) Statement
WhileStatementNoShortIf -> while ( Expression ) StatementNoShortIf
ForStatement -> for ( ForInitOpt ; ExpressionOpt ; ForUpdateOpt ) Statement
ForInitOpt -> ForInit
ForInitOpt ->
ExpressionOpt -> Expression
ExpressionOpt ->
ForUpdateOpt -> ForUpdate
ForUpdateOpt ->
ForStatementNoShortIf -> for ( ForInitOpt ; ExpressionOpt ; ForUpdateOpt ) StatementNoShortIf
ForInit -> LocalVariableDeclaration
ForInit -> StatementExpression
ForUpdate -> StatementExpression
ReturnStatement -> return ExpressionOpt ;
Primary -> PrimaryNoNewArray
Primary -> ArrayCreationExpression
PrimaryNoNewArray -> Literal
PrimaryNoNewArray -> this
PrimaryNoNewArray -> ( Expression )
PrimaryNoNewArray -> ClassInstanceCreationExpression
PrimaryNoNewArray -> FieldAccess
PrimaryNoNewArray -> MethodInvocation
PrimaryNoNewArray -> ArrayAccess
ClassInstanceCreationExpression -> new ClassType ( ArgumentListOpt )
ArgumentListOpt -> ArgumentList
ArgumentListOpt ->
ArgumentList -> Expression
ArgumentList -> ArgumentList , Expression
ArrayCreationExpression -> new PrimitiveType DimExpr
ArrayCreationExpression -> new ClassOrInterfaceType DimExpr
DimExpr -> [ Expression ]
FieldAccess -> Primary . IDENTIFIER
MethodInvocation -> Name ( ArgumentListOpt )
MethodInvocation -> Primary . IDENTIFIER ( ArgumentListOpt )
ArrayAccess -> Name [ Expression ]
ArrayAccess -> PrimaryNoNewArray [ Expression ]
UnaryExpression -> UnaryExpressionNotPlusMinus
UnaryExpression -> - UnaryExpression
UnaryExpressionNotPlusMinus -> ! UnaryExpression
UnaryExpressionNotPlusMinus -> CastExpression
UnaryExpressionNotPlusMinus -> Primary
UnaryExpressionNotPlusMinus -> Name
CastExpression -> ( PrimitiveType DimOpt ) UnaryExpression
CastExpression -> ( Expression ) UnaryExpressionNotPlusMinus
CastExpression -> ( Name Dim ) UnaryExpressionNotPlusMinus
DimOpt -> Dim
DimOpt ->
Dim -> [ ]
MultiplicativeExpression -> UnaryExpression
MultiplicativeExpression -> MultiplicativeExpression * UnaryExpression
MultiplicativeExpression -> MultiplicativeExpression / UnaryExpression
MultiplicativeExpression -> MultiplicativeExpression % UnaryExpression
AdditiveExpression -> MultiplicativeExpression
AdditiveExpression -> AdditiveExpression + MultiplicativeExpression
AdditiveExpression -> AdditiveExpression - MultiplicativeExpression
RelationalExpression -> AdditiveExpression
RelationalExpression -> RelationalExpression < AdditiveExpression
RelationalExpression -> RelationalExpression > AdditiveExpression
RelationalExpression -> RelationalExpression <= AdditiveExpression
RelationalExpression -> RelationalExpression >= AdditiveExpression
RelationalExpression -> RelationalExpression instanceof ReferenceType
EqualityExpression -> RelationalExpression
EqualityExpression -> EqualityExpression == RelationalExpression
EqualityExpression -> EqualityExpression != RelationalExpression
AndExpression -> EqualityExpression
AndExpression -> AndExpression & EqualityExpression
OrExpression -> AndExpression
OrExpression -> OrExpression | AndExpression
ConditionalAndExpression -> OrExpression
ConditionalAndExpression -> ConditionalAndExpression && OrExpression
ConditionalOrExpression -> ConditionalAndExpression
ConditionalOrExpression -> ConditionalOrExpression || ConditionalAndExpression
AssignmentExpression -> ConditionalOrExpression
AssignmentExpression -> Assignment
Assignment -> LeftHandSide AssignmentOperator AssignmentExpression
LeftHandSide -> Name
LeftHandSide -> FieldAccess
LeftHandSide -> ArrayAccess
AssignmentOperator -> =
Expression -> AssignmentExpression
